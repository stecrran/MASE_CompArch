/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

PARSER_BEGIN(Lexer1)

/** ID lister. */
public class Lexer1 {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Lexer1 parser = new Lexer1(System.in);
    parser.Input();
  }

}

PARSER_END(Lexer1)

SKIP :
{
  " "    // Skip spaces
| "\t"   // Skip tabs
| "\n"   // Skip newlines
| "\r"   // Skip carriage returns
}

TOKEN :
{
  // Recognize identifiers (letters followed by alphanumeric characters)
  < Id: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9"])* >
  { System.out.println("I recognize ID: " + matchedToken.image); }

  // Recognize numbers (as valid tokens, but handled in parser)
| < Number: ["0"-"9"] (["0"-"9"])* >
  
  // Catch-all token for any invalid input (other than letters or numbers)
| < INVALID: ~["a"-"z", "A"-"Z", "0"-"9", " ", "\t", "\n", "\r"] >
}

/** Top-level production rule */
void Input() :
{}
{
  // Handle IDs in a loop
  ( <Id> 
  | { throw new ParseException("Numbers are not allowed: " + token.image); } <Number> 
  | { throw new ParseException("Invalid character: " + token.image); } <INVALID>
  )* <EOF>
}


